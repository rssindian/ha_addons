name: Jackett Auto Update

on:
  schedule:
    - cron: "0 3 * * 6"
  workflow_dispatch:

jobs:
  check-and-update:
    runs-on: ubuntu-latest
    outputs:
      run-build: ${{ steps.update-result.outputs.run-build }}

    steps:
      # Check out the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Set up dependencies
      - name: Set Up Tools
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      # Run the update script (passing the GH_TOKEN as an environment variable)
      - name: Run Update Script
        id: update-result
        env:
          PA_TOKEN: ${{ secrets.PA_TOKEN }}  # Pass the GH_TOKEN to the script
        run: |
          chmod +x ./vpnjackett/autoupgrade.sh
          ./vpnjackett/autoupgrade.sh
          
          status=$? 

          # Debug: Print the exit code of the update script
          echo "Exit status of update script: $?"
          
          # Capture the exit code of autoupdate_jackett.sh
          if [[ $status -eq 0 ]]; then
            echo "run-build=success" >> $GITHUB_OUTPUT
          else
            echo "run-build=failure" >> $GITHUB_OUTPUT
          fi
      - name: Debug Output
        run: |
          echo "run-build value: ${{ steps.update-result.outputs.run-build }}"
    
  build:
    needs: check-and-update
    runs-on: ubuntu-latest
    name: Build Add-ons
    if: needs.check-and-update.outputs.run-build == 'success'
    strategy:
      matrix:
        addon: ["vpnjackett"]
        arch: ["amd64", "armv7", "aarch64"]
    permissions:
      contents: read
      packages: write

    steps:
      # Check out the repository
      - name: Checkout Repository
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0  # Ensure the entire history is fetched

      # Pull the latest changes
      - name: Pull Latest Changes
        run: |
          git fetch origin
          git reset --hard origin/${{ github.ref_name }}

      - name: Get information
        id: info
        uses: home-assistant/actions/helpers/info@master
        with:
          path: "./${{ matrix.addon }}"

      - name: Check if add-on should be built
        id: check
        run: |
          if [[ "${{ steps.info.outputs.image }}" == "null" ]]; then
            echo "Image property is not defined, skipping build"
            echo "build_arch=false" >> $GITHUB_OUTPUT;
          elif [[ "${{ steps.info.outputs.architectures }}" =~ ${{ matrix.arch }} ]]; then
            echo "build_arch=true" >> $GITHUB_OUTPUT;
            echo "image=$(echo ${{ steps.info.outputs.image }} | cut -d'/' -f3)" >> $GITHUB_OUTPUT;
          else
            echo "${{ matrix.arch }} is not a valid arch for ${{ matrix.addon }}, skipping build";
            echo "build_arch=false" >> $GITHUB_OUTPUT;
          fi

      - name: Login to GitHub Container Registry
        if: steps.check.outputs.build_arch == 'true'
        uses: docker/login-action@v3.1.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build ${{ matrix.addon }} add-on
        if: steps.check.outputs.build_arch == 'true'
        uses: home-assistant/builder@2024.03.5
        with:
          args: |
            --${{ matrix.arch }} \
            --target /data/${{ matrix.addon }} \
            --image "${{ steps.check.outputs.image }}" \
            --docker-hub "ghcr.io/${{ github.repository_owner }}" \
            --addon
